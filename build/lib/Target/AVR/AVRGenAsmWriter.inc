/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|* Assembly Writer Source Fragment                                            *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/

/// getMnemonic - This method is automatically generated by tablegen
/// from the instruction set description.
std::pair<const char *, uint64_t> AVRInstPrinter::getMnemonic(const MCInst *MI) {

#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Woverlength-strings"
#endif
  static const char AsmStrs[] = {
  /* 0 */ "lslw12\t\0"
  /* 8 */ "lsrw12\t\0"
  /* 16 */ "lslw4\t\0"
  /* 23 */ "lsrw4\t\0"
  /* 30 */ "lslb7\t\0"
  /* 37 */ "asrb7\t\0"
  /* 44 */ "lsrb7\t\0"
  /* 51 */ "lslw8\t\0"
  /* 58 */ "asrw8\t\0"
  /* 65 */ "lsrw8\t\0"
  /* 72 */ "rolb\t\0"
  /* 78 */ "rorb\t\0"
  /* 84 */ "sub\t\0"
  /* 89 */ "lac\t\0"
  /* 94 */ "brbc\t\0"
  /* 100 */ "sbc\t\0"
  /* 105 */ "adc\t\0"
  /* 110 */ "dec\t\0"
  /* 115 */ "sbic\t\0"
  /* 121 */ "inc\t\0"
  /* 126 */ "cpc\t\0"
  /* 131 */ "sbrc\t\0"
  /* 137 */ "spread\t\0"
  /* 145 */ "add\t\0"
  /* 150 */ "ldd\t\0"
  /* 155 */ "bld\t\0"
  /* 160 */ "and\t\0"
  /* 165 */ "std\t\0"
  /* 170 */ "brge\t\0"
  /* 176 */ "brne\t\0"
  /* 182 */ "cpse\t\0"
  /* 188 */ "spwrite\t\0"
  /* 197 */ "neg\t\0"
  /* 202 */ "xch\t\0"
  /* 207 */ "brsh\t\0"
  /* 213 */ "push\t\0"
  /* 219 */ "cbi\t\0"
  /* 224 */ "sbi\t\0"
  /* 229 */ "subi\t\0"
  /* 235 */ "sbci\t\0"
  /* 241 */ "ldi\t\0"
  /* 246 */ "andi\t\0"
  /* 252 */ "brmi\t\0"
  /* 258 */ "cpi\t\0"
  /* 263 */ "ori\t\0"
  /* 268 */ "stdstk\t\0"
  /* 276 */ "stdwstk\t\0"
  /* 285 */ "rcall\t\0"
  /* 292 */ "brpl\t\0"
  /* 298 */ "fmul\t\0"
  /* 304 */ "com\t\0"
  /* 309 */ "elpm\t\0"
  /* 315 */ "in\t\0"
  /* 319 */ "brlo\t\0"
  /* 325 */ "swap\t\0"
  /* 331 */ "cp\t\0"
  /* 335 */ "rjmp\t\0"
  /* 341 */ "pop\t\0"
  /* 346 */ "breq\t\0"
  /* 352 */ "bclr\t\0"
  /* 358 */ "eor\t\0"
  /* 363 */ "ror\t\0"
  /* 368 */ "asr\t\0"
  /* 373 */ "lsr\t\0"
  /* 378 */ "las\t\0"
  /* 383 */ "brbs\t\0"
  /* 389 */ "lds\t\0"
  /* 394 */ "des\t\0"
  /* 399 */ "sbis\t\0"
  /* 405 */ "fmuls\t\0"
  /* 412 */ "sbrs\t\0"
  /* 418 */ "sts\t\0"
  /* 423 */ "lat\t\0"
  /* 428 */ "bset\t\0"
  /* 434 */ "brlt\t\0"
  /* 440 */ "bst\t\0"
  /* 445 */ "out\t\0"
  /* 450 */ "sext\t\0"
  /* 456 */ "zext\t\0"
  /* 462 */ "fmulsu\t\0"
  /* 470 */ "mov\t\0"
  /* 475 */ "subw\t\0"
  /* 481 */ "sbcw\t\0"
  /* 487 */ "adcw\t\0"
  /* 493 */ "cpcw\t\0"
  /* 499 */ "addw\t\0"
  /* 505 */ "lddw\t\0"
  /* 511 */ "ldw\t\0"
  /* 516 */ "andw\t\0"
  /* 522 */ "stdw\t\0"
  /* 528 */ "negw\t\0"
  /* 534 */ "pushw\t\0"
  /* 541 */ "sbiw\t\0"
  /* 547 */ "subiw\t\0"
  /* 554 */ "sbciw\t\0"
  /* 561 */ "adiw\t\0"
  /* 567 */ "ldiw\t\0"
  /* 573 */ "andiw\t\0"
  /* 580 */ "oriw\t\0"
  /* 586 */ "rolw\t\0"
  /* 592 */ "lslw\t\0"
  /* 598 */ "comw\t\0"
  /* 604 */ "lpmw\t\0"
  /* 610 */ "inw\t\0"
  /* 615 */ "cpw\t\0"
  /* 620 */ "popw\t\0"
  /* 626 */ "eorw\t\0"
  /* 632 */ "rorw\t\0"
  /* 638 */ "asrw\t\0"
  /* 644 */ "lsrw\t\0"
  /* 650 */ "ldsw\t\0"
  /* 656 */ "stsw\t\0"
  /* 662 */ "stw\t\0"
  /* 667 */ "outw\t\0"
  /* 673 */ "movw\t\0"
  /* 679 */ "frmidx\t\0"
  /* 687 */ "spm \0"
  /* 692 */ "st\t-\0"
  /* 697 */ "stw\t-\0"
  /* 703 */ "# XRay Function Patchable RET.\0"
  /* 734 */ "# XRay Typed Event Log.\0"
  /* 758 */ "# XRay Custom Event Log.\0"
  /* 783 */ "# XRay Function Enter.\0"
  /* 806 */ "# XRay Tail Call Exit.\0"
  /* 829 */ "# XRay Function Exit.\0"
  /* 851 */ "LIFETIME_END\0"
  /* 864 */ "PSEUDO_PROBE\0"
  /* 877 */ "BUNDLE\0"
  /* 884 */ "DBG_VALUE\0"
  /* 894 */ "DBG_INSTR_REF\0"
  /* 908 */ "DBG_LABEL\0"
  /* 918 */ "#ADJCALLSTACKDOWN\0"
  /* 936 */ "# Rol16 PSEUDO\0"
  /* 951 */ "# Lsl16 PSEUDO\0"
  /* 966 */ "# Ror16 PSEUDO\0"
  /* 981 */ "# Asr16 PSEUDO\0"
  /* 996 */ "# Lsr16 PSEUDO\0"
  /* 1011 */ "# Select16 PSEUDO\0"
  /* 1029 */ "# Rol8 PSEUDO\0"
  /* 1043 */ "# Lsl8 PSEUDO\0"
  /* 1057 */ "# Ror8 PSEUDO\0"
  /* 1071 */ "# Asr8 PSEUDO\0"
  /* 1085 */ "# Lsr8 PSEUDO\0"
  /* 1099 */ "# Select8 PSEUDO\0"
  /* 1116 */ "#ADJCALLSTACKUP\0"
  /* 1132 */ "LIFETIME_START\0"
  /* 1147 */ "atomic_fence\0"
  /* 1160 */ "reti\0"
  /* 1165 */ "break\0"
  /* 1171 */ "# FEntry call\0"
  /* 1185 */ "eicall\0"
  /* 1192 */ "elpm\0"
  /* 1197 */ "spm\0"
  /* 1201 */ "sleep\0"
  /* 1207 */ "eijmp\0"
  /* 1213 */ "atomic_op\0"
  /* 1223 */ "nop\0"
  /* 1227 */ "wdr\0"
  /* 1231 */ "ret\0"
};
#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif

  static const uint16_t OpInfo0[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// INLINEASM_BR
    0U,	// CFI_INSTRUCTION
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// ANNOTATION_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    885U,	// DBG_VALUE
    895U,	// DBG_INSTR_REF
    909U,	// DBG_LABEL
    0U,	// REG_SEQUENCE
    0U,	// COPY
    878U,	// BUNDLE
    1133U,	// LIFETIME_START
    852U,	// LIFETIME_END
    865U,	// PSEUDO_PROBE
    0U,	// STACKMAP
    1172U,	// FENTRY_CALL
    0U,	// PATCHPOINT
    0U,	// LOAD_STACK_GUARD
    0U,	// PREALLOCATED_SETUP
    0U,	// PREALLOCATED_ARG
    0U,	// STATEPOINT
    0U,	// LOCAL_ESCAPE
    0U,	// FAULTING_OP
    0U,	// PATCHABLE_OP
    784U,	// PATCHABLE_FUNCTION_ENTER
    704U,	// PATCHABLE_RET
    830U,	// PATCHABLE_FUNCTION_EXIT
    807U,	// PATCHABLE_TAIL_CALL
    759U,	// PATCHABLE_EVENT_CALL
    735U,	// PATCHABLE_TYPED_EVENT_CALL
    0U,	// ICALL_BRANCH_FUNNEL
    0U,	// G_ASSERT_ZEXT
    0U,	// G_ADD
    0U,	// G_SUB
    0U,	// G_MUL
    0U,	// G_SDIV
    0U,	// G_UDIV
    0U,	// G_SREM
    0U,	// G_UREM
    0U,	// G_AND
    0U,	// G_OR
    0U,	// G_XOR
    0U,	// G_IMPLICIT_DEF
    0U,	// G_PHI
    0U,	// G_FRAME_INDEX
    0U,	// G_GLOBAL_VALUE
    0U,	// G_EXTRACT
    0U,	// G_UNMERGE_VALUES
    0U,	// G_INSERT
    0U,	// G_MERGE_VALUES
    0U,	// G_BUILD_VECTOR
    0U,	// G_BUILD_VECTOR_TRUNC
    0U,	// G_CONCAT_VECTORS
    0U,	// G_PTRTOINT
    0U,	// G_INTTOPTR
    0U,	// G_BITCAST
    0U,	// G_FREEZE
    0U,	// G_INTRINSIC_TRUNC
    0U,	// G_INTRINSIC_ROUND
    0U,	// G_INTRINSIC_LRINT
    0U,	// G_INTRINSIC_ROUNDEVEN
    0U,	// G_READCYCLECOUNTER
    0U,	// G_LOAD
    0U,	// G_SEXTLOAD
    0U,	// G_ZEXTLOAD
    0U,	// G_INDEXED_LOAD
    0U,	// G_INDEXED_SEXTLOAD
    0U,	// G_INDEXED_ZEXTLOAD
    0U,	// G_STORE
    0U,	// G_INDEXED_STORE
    0U,	// G_ATOMIC_CMPXCHG_WITH_SUCCESS
    0U,	// G_ATOMIC_CMPXCHG
    0U,	// G_ATOMICRMW_XCHG
    0U,	// G_ATOMICRMW_ADD
    0U,	// G_ATOMICRMW_SUB
    0U,	// G_ATOMICRMW_AND
    0U,	// G_ATOMICRMW_NAND
    0U,	// G_ATOMICRMW_OR
    0U,	// G_ATOMICRMW_XOR
    0U,	// G_ATOMICRMW_MAX
    0U,	// G_ATOMICRMW_MIN
    0U,	// G_ATOMICRMW_UMAX
    0U,	// G_ATOMICRMW_UMIN
    0U,	// G_ATOMICRMW_FADD
    0U,	// G_ATOMICRMW_FSUB
    0U,	// G_FENCE
    0U,	// G_BRCOND
    0U,	// G_BRINDIRECT
    0U,	// G_INTRINSIC
    0U,	// G_INTRINSIC_W_SIDE_EFFECTS
    0U,	// G_ANYEXT
    0U,	// G_TRUNC
    0U,	// G_CONSTANT
    0U,	// G_FCONSTANT
    0U,	// G_VASTART
    0U,	// G_VAARG
    0U,	// G_SEXT
    0U,	// G_SEXT_INREG
    0U,	// G_ZEXT
    0U,	// G_SHL
    0U,	// G_LSHR
    0U,	// G_ASHR
    0U,	// G_FSHL
    0U,	// G_FSHR
    0U,	// G_ICMP
    0U,	// G_FCMP
    0U,	// G_SELECT
    0U,	// G_UADDO
    0U,	// G_UADDE
    0U,	// G_USUBO
    0U,	// G_USUBE
    0U,	// G_SADDO
    0U,	// G_SADDE
    0U,	// G_SSUBO
    0U,	// G_SSUBE
    0U,	// G_UMULO
    0U,	// G_SMULO
    0U,	// G_UMULH
    0U,	// G_SMULH
    0U,	// G_UADDSAT
    0U,	// G_SADDSAT
    0U,	// G_USUBSAT
    0U,	// G_SSUBSAT
    0U,	// G_USHLSAT
    0U,	// G_SSHLSAT
    0U,	// G_SMULFIX
    0U,	// G_UMULFIX
    0U,	// G_SMULFIXSAT
    0U,	// G_UMULFIXSAT
    0U,	// G_SDIVFIX
    0U,	// G_UDIVFIX
    0U,	// G_SDIVFIXSAT
    0U,	// G_UDIVFIXSAT
    0U,	// G_FADD
    0U,	// G_FSUB
    0U,	// G_FMUL
    0U,	// G_FMA
    0U,	// G_FMAD
    0U,	// G_FDIV
    0U,	// G_FREM
    0U,	// G_FPOW
    0U,	// G_FPOWI
    0U,	// G_FEXP
    0U,	// G_FEXP2
    0U,	// G_FLOG
    0U,	// G_FLOG2
    0U,	// G_FLOG10
    0U,	// G_FNEG
    0U,	// G_FPEXT
    0U,	// G_FPTRUNC
    0U,	// G_FPTOSI
    0U,	// G_FPTOUI
    0U,	// G_SITOFP
    0U,	// G_UITOFP
    0U,	// G_FABS
    0U,	// G_FCOPYSIGN
    0U,	// G_FCANONICALIZE
    0U,	// G_FMINNUM
    0U,	// G_FMAXNUM
    0U,	// G_FMINNUM_IEEE
    0U,	// G_FMAXNUM_IEEE
    0U,	// G_FMINIMUM
    0U,	// G_FMAXIMUM
    0U,	// G_PTR_ADD
    0U,	// G_PTRMASK
    0U,	// G_SMIN
    0U,	// G_SMAX
    0U,	// G_UMIN
    0U,	// G_UMAX
    0U,	// G_ABS
    0U,	// G_BR
    0U,	// G_BRJT
    0U,	// G_INSERT_VECTOR_ELT
    0U,	// G_EXTRACT_VECTOR_ELT
    0U,	// G_SHUFFLE_VECTOR
    0U,	// G_CTTZ
    0U,	// G_CTTZ_ZERO_UNDEF
    0U,	// G_CTLZ
    0U,	// G_CTLZ_ZERO_UNDEF
    0U,	// G_CTPOP
    0U,	// G_BSWAP
    0U,	// G_BITREVERSE
    0U,	// G_FCEIL
    0U,	// G_FCOS
    0U,	// G_FSIN
    0U,	// G_FSQRT
    0U,	// G_FFLOOR
    0U,	// G_FRINT
    0U,	// G_FNEARBYINT
    0U,	// G_ADDRSPACE_CAST
    0U,	// G_BLOCK_ADDR
    0U,	// G_JUMP_TABLE
    0U,	// G_DYN_STACKALLOC
    0U,	// G_STRICT_FADD
    0U,	// G_STRICT_FSUB
    0U,	// G_STRICT_FMUL
    0U,	// G_STRICT_FDIV
    0U,	// G_STRICT_FREM
    0U,	// G_STRICT_FMA
    0U,	// G_STRICT_FSQRT
    0U,	// G_READ_REGISTER
    0U,	// G_WRITE_REGISTER
    0U,	// G_MEMCPY
    0U,	// G_MEMMOVE
    0U,	// G_MEMSET
    0U,	// G_VECREDUCE_SEQ_FADD
    0U,	// G_VECREDUCE_SEQ_FMUL
    0U,	// G_VECREDUCE_FADD
    0U,	// G_VECREDUCE_FMUL
    0U,	// G_VECREDUCE_FMAX
    0U,	// G_VECREDUCE_FMIN
    0U,	// G_VECREDUCE_ADD
    0U,	// G_VECREDUCE_MUL
    0U,	// G_VECREDUCE_AND
    0U,	// G_VECREDUCE_OR
    0U,	// G_VECREDUCE_XOR
    0U,	// G_VECREDUCE_SMAX
    0U,	// G_VECREDUCE_SMIN
    0U,	// G_VECREDUCE_UMAX
    0U,	// G_VECREDUCE_UMIN
    2536U,	// ADCWRdRr
    2548U,	// ADDWRdRr
    919U,	// ADJCALLSTACKDOWN
    1117U,	// ADJCALLSTACKUP
    2622U,	// ANDIWRdK
    2565U,	// ANDWRdRr
    18470U,	// ASRB7Rd
    18491U,	// ASRW8Rd
    19071U,	// ASRWRd
    982U,	// Asr16
    1072U,	// Asr8
    1148U,	// AtomicFence
    1214U,	// AtomicLoad16
    1214U,	// AtomicLoad8
    1214U,	// AtomicLoadAdd16
    1214U,	// AtomicLoadAdd8
    1214U,	// AtomicLoadAnd16
    1214U,	// AtomicLoadAnd8
    1214U,	// AtomicLoadOr16
    1214U,	// AtomicLoadOr8
    1214U,	// AtomicLoadSub16
    1214U,	// AtomicLoadSub8
    1214U,	// AtomicLoadXor16
    1214U,	// AtomicLoadXor8
    1214U,	// AtomicStore16
    1214U,	// AtomicStore8
    19031U,	// COMWRd
    2542U,	// CPCWRdRr
    2664U,	// CPWRdRr
    2675U,	// EORWRdRr
    2728U,	// FRMIDX
    2659U,	// INWRdA
    2554U,	// LDDWRdPtrQ
    2554U,	// LDDWRdYQ
    2616U,	// LDIWRdK
    2699U,	// LDSWRdK
    2560U,	// LDWRdPtr
    35328U,	// LDWRdPtrPd
    2560U,	// LDWRdPtrPi
    2653U,	// LPMWRdZ
    2653U,	// LPMWRdZPi
    18463U,	// LSLB7Rd
    18433U,	// LSLW12Rd
    18449U,	// LSLW4Rd
    18484U,	// LSLW8Rd
    19025U,	// LSLWRd
    18477U,	// LSRB7Rd
    18441U,	// LSRW12Rd
    18456U,	// LSRW4Rd
    18498U,	// LSRW8Rd
    19077U,	// LSRWRd
    952U,	// Lsl16
    1044U,	// Lsl8
    997U,	// Lsr16
    1086U,	// Lsr8
    18961U,	// NEGWRd
    2629U,	// ORIWRdK
    2676U,	// ORWRdRr
    2716U,	// OUTWARr
    19053U,	// POPWRd
    18967U,	// PUSHWRr
    18505U,	// ROLBRd
    19019U,	// ROLWRd
    18511U,	// RORBRd
    19065U,	// RORWRd
    937U,	// Rol16
    1030U,	// Rol8
    967U,	// Ror16
    1058U,	// Ror8
    2603U,	// SBCIWRdK
    2530U,	// SBCWRdRr
    2499U,	// SEXT
    2186U,	// SPREAD
    2237U,	// SPWRITE
    2317U,	// STDSPQRr
    4619U,	// STDWPtrQRr
    2325U,	// STDWSPQRr
    2705U,	// STSWKRr
    6842U,	// STWPtrPdRr
    55959U,	// STWPtrPiRr
    2711U,	// STWPtrRr
    2596U,	// SUBIWRdK
    2524U,	// SUBWRdRr
    1012U,	// Select16
    1100U,	// Select8
    2505U,	// ZEXT
    2154U,	// ADCRdRr
    2194U,	// ADDRdRr
    2610U,	// ADIWRdK
    2295U,	// ANDIRdK
    2209U,	// ANDRdRr
    18801U,	// ASRRd
    18785U,	// BCLRs
    2204U,	// BLD
    2143U,	// BRBCsk
    2432U,	// BRBSsk
    1166U,	// BREAK
    8539U,	// BREQk
    8363U,	// BRGEk
    8512U,	// BRLOk
    8627U,	// BRLTk
    8445U,	// BRMIk
    8369U,	// BRNEk
    8485U,	// BRPLk
    8400U,	// BRSHk
    18861U,	// BSETs
    2489U,	// BST
    18719U,	// CALLk
    2268U,	// CBIAb
    18737U,	// COMRd
    2175U,	// CPCRdRr
    2307U,	// CPIRdK
    2380U,	// CPRdRr
    2231U,	// CPSE
    18543U,	// DECRd
    18827U,	// DESK
    1186U,	// EICALL
    1208U,	// EIJMP
    1193U,	// ELPM
    2358U,	// ELPMRdZ
    2358U,	// ELPMRdZPi
    2407U,	// EORRdRr
    2347U,	// FMUL
    2454U,	// FMULS
    2511U,	// FMULSU
    1187U,	// ICALL
    1209U,	// IJMP
    18554U,	// INCRd
    2364U,	// INRdA
    18769U,	// JMPk
    6234U,	// LACZRd
    6523U,	// LASZRd
    6568U,	// LATZRd
    2199U,	// LDDRdPtrQ
    2290U,	// LDIRdK
    2205U,	// LDRdPtr
    34973U,	// LDRdPtrPd
    2205U,	// LDRdPtrPi
    2438U,	// LDSRdK
    1194U,	// LPM
    2359U,	// LPMRdZ
    2359U,	// LPMRdZPi
    18806U,	// LSRRd
    2519U,	// MOVRdRr
    2722U,	// MOVWRdRr
    2348U,	// MULRdRr
    2455U,	// MULSRdRr
    2512U,	// MULSURdRr
    18630U,	// NEGRd
    1224U,	// NOP
    2312U,	// ORIRdK
    2408U,	// ORRdRr
    2494U,	// OUTARr
    18774U,	// POPRd
    18646U,	// PUSHRr
    8478U,	// RCALLk
    1232U,	// RET
    1161U,	// RETI
    8528U,	// RJMPk
    18796U,	// RORRd
    2284U,	// SBCIRdK
    2149U,	// SBCRdRr
    2273U,	// SBIAb
    2164U,	// SBICAb
    2448U,	// SBISAb
    2590U,	// SBIWRdK
    2180U,	// SBRCRrB
    2461U,	// SBRSRrB
    1202U,	// SLEEP
    1198U,	// SPM
    2736U,	// SPMZPi
    4262U,	// STDPtrQRr
    6837U,	// STPtrPdRr
    55738U,	// STPtrPiRr
    2490U,	// STPtrRr
    2467U,	// STSKRr
    2278U,	// SUBIRdK
    2133U,	// SUBRdRr
    18758U,	// SWAPRd
    1228U,	// WDR
    6347U,	// XCHZRd
  };

  static const uint8_t OpInfo1[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// INLINEASM_BR
    0U,	// CFI_INSTRUCTION
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// ANNOTATION_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    0U,	// DBG_VALUE
    0U,	// DBG_INSTR_REF
    0U,	// DBG_LABEL
    0U,	// REG_SEQUENCE
    0U,	// COPY
    0U,	// BUNDLE
    0U,	// LIFETIME_START
    0U,	// LIFETIME_END
    0U,	// PSEUDO_PROBE
    0U,	// STACKMAP
    0U,	// FENTRY_CALL
    0U,	// PATCHPOINT
    0U,	// LOAD_STACK_GUARD
    0U,	// PREALLOCATED_SETUP
    0U,	// PREALLOCATED_ARG
    0U,	// STATEPOINT
    0U,	// LOCAL_ESCAPE
    0U,	// FAULTING_OP
    0U,	// PATCHABLE_OP
    0U,	// PATCHABLE_FUNCTION_ENTER
    0U,	// PATCHABLE_RET
    0U,	// PATCHABLE_FUNCTION_EXIT
    0U,	// PATCHABLE_TAIL_CALL
    0U,	// PATCHABLE_EVENT_CALL
    0U,	// PATCHABLE_TYPED_EVENT_CALL
    0U,	// ICALL_BRANCH_FUNNEL
    0U,	// G_ASSERT_ZEXT
    0U,	// G_ADD
    0U,	// G_SUB
    0U,	// G_MUL
    0U,	// G_SDIV
    0U,	// G_UDIV
    0U,	// G_SREM
    0U,	// G_UREM
    0U,	// G_AND
    0U,	// G_OR
    0U,	// G_XOR
    0U,	// G_IMPLICIT_DEF
    0U,	// G_PHI
    0U,	// G_FRAME_INDEX
    0U,	// G_GLOBAL_VALUE
    0U,	// G_EXTRACT
    0U,	// G_UNMERGE_VALUES
    0U,	// G_INSERT
    0U,	// G_MERGE_VALUES
    0U,	// G_BUILD_VECTOR
    0U,	// G_BUILD_VECTOR_TRUNC
    0U,	// G_CONCAT_VECTORS
    0U,	// G_PTRTOINT
    0U,	// G_INTTOPTR
    0U,	// G_BITCAST
    0U,	// G_FREEZE
    0U,	// G_INTRINSIC_TRUNC
    0U,	// G_INTRINSIC_ROUND
    0U,	// G_INTRINSIC_LRINT
    0U,	// G_INTRINSIC_ROUNDEVEN
    0U,	// G_READCYCLECOUNTER
    0U,	// G_LOAD
    0U,	// G_SEXTLOAD
    0U,	// G_ZEXTLOAD
    0U,	// G_INDEXED_LOAD
    0U,	// G_INDEXED_SEXTLOAD
    0U,	// G_INDEXED_ZEXTLOAD
    0U,	// G_STORE
    0U,	// G_INDEXED_STORE
    0U,	// G_ATOMIC_CMPXCHG_WITH_SUCCESS
    0U,	// G_ATOMIC_CMPXCHG
    0U,	// G_ATOMICRMW_XCHG
    0U,	// G_ATOMICRMW_ADD
    0U,	// G_ATOMICRMW_SUB
    0U,	// G_ATOMICRMW_AND
    0U,	// G_ATOMICRMW_NAND
    0U,	// G_ATOMICRMW_OR
    0U,	// G_ATOMICRMW_XOR
    0U,	// G_ATOMICRMW_MAX
    0U,	// G_ATOMICRMW_MIN
    0U,	// G_ATOMICRMW_UMAX
    0U,	// G_ATOMICRMW_UMIN
    0U,	// G_ATOMICRMW_FADD
    0U,	// G_ATOMICRMW_FSUB
    0U,	// G_FENCE
    0U,	// G_BRCOND
    0U,	// G_BRINDIRECT
    0U,	// G_INTRINSIC
    0U,	// G_INTRINSIC_W_SIDE_EFFECTS
    0U,	// G_ANYEXT
    0U,	// G_TRUNC
    0U,	// G_CONSTANT
    0U,	// G_FCONSTANT
    0U,	// G_VASTART
    0U,	// G_VAARG
    0U,	// G_SEXT
    0U,	// G_SEXT_INREG
    0U,	// G_ZEXT
    0U,	// G_SHL
    0U,	// G_LSHR
    0U,	// G_ASHR
    0U,	// G_FSHL
    0U,	// G_FSHR
    0U,	// G_ICMP
    0U,	// G_FCMP
    0U,	// G_SELECT
    0U,	// G_UADDO
    0U,	// G_UADDE
    0U,	// G_USUBO
    0U,	// G_USUBE
    0U,	// G_SADDO
    0U,	// G_SADDE
    0U,	// G_SSUBO
    0U,	// G_SSUBE
    0U,	// G_UMULO
    0U,	// G_SMULO
    0U,	// G_UMULH
    0U,	// G_SMULH
    0U,	// G_UADDSAT
    0U,	// G_SADDSAT
    0U,	// G_USUBSAT
    0U,	// G_SSUBSAT
    0U,	// G_USHLSAT
    0U,	// G_SSHLSAT
    0U,	// G_SMULFIX
    0U,	// G_UMULFIX
    0U,	// G_SMULFIXSAT
    0U,	// G_UMULFIXSAT
    0U,	// G_SDIVFIX
    0U,	// G_UDIVFIX
    0U,	// G_SDIVFIXSAT
    0U,	// G_UDIVFIXSAT
    0U,	// G_FADD
    0U,	// G_FSUB
    0U,	// G_FMUL
    0U,	// G_FMA
    0U,	// G_FMAD
    0U,	// G_FDIV
    0U,	// G_FREM
    0U,	// G_FPOW
    0U,	// G_FPOWI
    0U,	// G_FEXP
    0U,	// G_FEXP2
    0U,	// G_FLOG
    0U,	// G_FLOG2
    0U,	// G_FLOG10
    0U,	// G_FNEG
    0U,	// G_FPEXT
    0U,	// G_FPTRUNC
    0U,	// G_FPTOSI
    0U,	// G_FPTOUI
    0U,	// G_SITOFP
    0U,	// G_UITOFP
    0U,	// G_FABS
    0U,	// G_FCOPYSIGN
    0U,	// G_FCANONICALIZE
    0U,	// G_FMINNUM
    0U,	// G_FMAXNUM
    0U,	// G_FMINNUM_IEEE
    0U,	// G_FMAXNUM_IEEE
    0U,	// G_FMINIMUM
    0U,	// G_FMAXIMUM
    0U,	// G_PTR_ADD
    0U,	// G_PTRMASK
    0U,	// G_SMIN
    0U,	// G_SMAX
    0U,	// G_UMIN
    0U,	// G_UMAX
    0U,	// G_ABS
    0U,	// G_BR
    0U,	// G_BRJT
    0U,	// G_INSERT_VECTOR_ELT
    0U,	// G_EXTRACT_VECTOR_ELT
    0U,	// G_SHUFFLE_VECTOR
    0U,	// G_CTTZ
    0U,	// G_CTTZ_ZERO_UNDEF
    0U,	// G_CTLZ
    0U,	// G_CTLZ_ZERO_UNDEF
    0U,	// G_CTPOP
    0U,	// G_BSWAP
    0U,	// G_BITREVERSE
    0U,	// G_FCEIL
    0U,	// G_FCOS
    0U,	// G_FSIN
    0U,	// G_FSQRT
    0U,	// G_FFLOOR
    0U,	// G_FRINT
    0U,	// G_FNEARBYINT
    0U,	// G_ADDRSPACE_CAST
    0U,	// G_BLOCK_ADDR
    0U,	// G_JUMP_TABLE
    0U,	// G_DYN_STACKALLOC
    0U,	// G_STRICT_FADD
    0U,	// G_STRICT_FSUB
    0U,	// G_STRICT_FMUL
    0U,	// G_STRICT_FDIV
    0U,	// G_STRICT_FREM
    0U,	// G_STRICT_FMA
    0U,	// G_STRICT_FSQRT
    0U,	// G_READ_REGISTER
    0U,	// G_WRITE_REGISTER
    0U,	// G_MEMCPY
    0U,	// G_MEMMOVE
    0U,	// G_MEMSET
    0U,	// G_VECREDUCE_SEQ_FADD
    0U,	// G_VECREDUCE_SEQ_FMUL
    0U,	// G_VECREDUCE_FADD
    0U,	// G_VECREDUCE_FMUL
    0U,	// G_VECREDUCE_FMAX
    0U,	// G_VECREDUCE_FMIN
    0U,	// G_VECREDUCE_ADD
    0U,	// G_VECREDUCE_MUL
    0U,	// G_VECREDUCE_AND
    0U,	// G_VECREDUCE_OR
    0U,	// G_VECREDUCE_XOR
    0U,	// G_VECREDUCE_SMAX
    0U,	// G_VECREDUCE_SMIN
    0U,	// G_VECREDUCE_UMAX
    0U,	// G_VECREDUCE_UMIN
    0U,	// ADCWRdRr
    0U,	// ADDWRdRr
    0U,	// ADJCALLSTACKDOWN
    0U,	// ADJCALLSTACKUP
    0U,	// ANDIWRdK
    0U,	// ANDWRdRr
    0U,	// ASRB7Rd
    0U,	// ASRW8Rd
    0U,	// ASRWRd
    0U,	// Asr16
    0U,	// Asr8
    0U,	// AtomicFence
    0U,	// AtomicLoad16
    0U,	// AtomicLoad8
    0U,	// AtomicLoadAdd16
    0U,	// AtomicLoadAdd8
    0U,	// AtomicLoadAnd16
    0U,	// AtomicLoadAnd8
    0U,	// AtomicLoadOr16
    0U,	// AtomicLoadOr8
    0U,	// AtomicLoadSub16
    0U,	// AtomicLoadSub8
    0U,	// AtomicLoadXor16
    0U,	// AtomicLoadXor8
    0U,	// AtomicStore16
    0U,	// AtomicStore8
    0U,	// COMWRd
    2U,	// CPCWRdRr
    2U,	// CPWRdRr
    0U,	// EORWRdRr
    18U,	// FRMIDX
    2U,	// INWRdA
    4U,	// LDDWRdPtrQ
    4U,	// LDDWRdYQ
    2U,	// LDIWRdK
    2U,	// LDSWRdK
    2U,	// LDWRdPtr
    0U,	// LDWRdPtrPd
    32U,	// LDWRdPtrPi
    2U,	// LPMWRdZ
    34U,	// LPMWRdZPi
    0U,	// LSLB7Rd
    0U,	// LSLW12Rd
    0U,	// LSLW4Rd
    0U,	// LSLW8Rd
    0U,	// LSLWRd
    0U,	// LSRB7Rd
    0U,	// LSRW12Rd
    0U,	// LSRW4Rd
    0U,	// LSRW8Rd
    0U,	// LSRWRd
    0U,	// Lsl16
    0U,	// Lsl8
    0U,	// Lsr16
    0U,	// Lsr8
    0U,	// NEGWRd
    0U,	// ORIWRdK
    0U,	// ORWRdRr
    2U,	// OUTWARr
    0U,	// POPWRd
    0U,	// PUSHWRr
    0U,	// ROLBRd
    0U,	// ROLWRd
    0U,	// RORBRd
    0U,	// RORWRd
    0U,	// Rol16
    0U,	// Rol8
    0U,	// Ror16
    0U,	// Ror8
    0U,	// SBCIWRdK
    0U,	// SBCWRdRr
    2U,	// SEXT
    2U,	// SPREAD
    2U,	// SPWRITE
    0U,	// STDSPQRr
    0U,	// STDWPtrQRr
    0U,	// STDWSPQRr
    2U,	// STSWKRr
    0U,	// STWPtrPdRr
    0U,	// STWPtrPiRr
    2U,	// STWPtrRr
    0U,	// SUBIWRdK
    0U,	// SUBWRdRr
    0U,	// Select16
    0U,	// Select8
    2U,	// ZEXT
    0U,	// ADCRdRr
    0U,	// ADDRdRr
    0U,	// ADIWRdK
    0U,	// ANDIRdK
    0U,	// ANDRdRr
    0U,	// ASRRd
    0U,	// BCLRs
    2U,	// BLD
    6U,	// BRBCsk
    6U,	// BRBSsk
    0U,	// BREAK
    0U,	// BREQk
    0U,	// BRGEk
    0U,	// BRLOk
    0U,	// BRLTk
    0U,	// BRMIk
    0U,	// BRNEk
    0U,	// BRPLk
    0U,	// BRSHk
    0U,	// BSETs
    2U,	// BST
    0U,	// CALLk
    2U,	// CBIAb
    0U,	// COMRd
    2U,	// CPCRdRr
    2U,	// CPIRdK
    2U,	// CPRdRr
    2U,	// CPSE
    0U,	// DECRd
    0U,	// DESK
    0U,	// EICALL
    0U,	// EIJMP
    0U,	// ELPM
    2U,	// ELPMRdZ
    34U,	// ELPMRdZPi
    0U,	// EORRdRr
    2U,	// FMUL
    2U,	// FMULS
    2U,	// FMULSU
    0U,	// ICALL
    0U,	// IJMP
    0U,	// INCRd
    2U,	// INRdA
    0U,	// JMPk
    8U,	// LACZRd
    8U,	// LASZRd
    8U,	// LATZRd
    4U,	// LDDRdPtrQ
    2U,	// LDIRdK
    2U,	// LDRdPtr
    0U,	// LDRdPtrPd
    32U,	// LDRdPtrPi
    2U,	// LDSRdK
    0U,	// LPM
    2U,	// LPMRdZ
    34U,	// LPMRdZPi
    0U,	// LSRRd
    2U,	// MOVRdRr
    2U,	// MOVWRdRr
    2U,	// MULRdRr
    2U,	// MULSRdRr
    2U,	// MULSURdRr
    0U,	// NEGRd
    0U,	// NOP
    0U,	// ORIRdK
    0U,	// ORRdRr
    2U,	// OUTARr
    0U,	// POPRd
    0U,	// PUSHRr
    0U,	// RCALLk
    0U,	// RET
    0U,	// RETI
    0U,	// RJMPk
    0U,	// RORRd
    0U,	// SBCIRdK
    0U,	// SBCRdRr
    2U,	// SBIAb
    2U,	// SBICAb
    2U,	// SBISAb
    0U,	// SBIWRdK
    2U,	// SBRCRrB
    2U,	// SBRSRrB
    0U,	// SLEEP
    0U,	// SPM
    1U,	// SPMZPi
    0U,	// STDPtrQRr
    0U,	// STPtrPdRr
    0U,	// STPtrPiRr
    2U,	// STPtrRr
    2U,	// STSKRr
    0U,	// SUBIRdK
    0U,	// SUBRdRr
    0U,	// SWAPRd
    0U,	// WDR
    8U,	// XCHZRd
  };

  // Emit the opcode for the instruction.
  uint32_t Bits = 0;
  Bits |= OpInfo0[MI->getOpcode()] << 0;
  Bits |= OpInfo1[MI->getOpcode()] << 16;
  return {AsmStrs+(Bits & 2047)-1, Bits};

}
/// printInstruction - This method is automatically generated by tablegen
/// from the instruction set description.
void AVRInstPrinter::printInstruction(const MCInst *MI, uint64_t Address, raw_ostream &O) {
  O << "\t";

  auto MnemonicInfo = getMnemonic(MI);

  O << MnemonicInfo.first;

  uint32_t Bits = MnemonicInfo.second;
  assert(Bits != 0 && "Cannot print this instruction.");

  // Fragment 0 encoded into 3 bits for 5 unique commands.
  switch ((Bits >> 11) & 7) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // DBG_VALUE, DBG_INSTR_REF, DBG_LABEL, BUNDLE, LIFETIME_START, LIFETIME_...
    return;
    break;
  case 1:
    // ADCWRdRr, ADDWRdRr, ANDIWRdK, ANDWRdRr, ASRB7Rd, ASRW8Rd, ASRWRd, COMW...
    printOperand(MI, 0, O);
    break;
  case 2:
    // STDWPtrQRr, STDPtrQRr
    printMemri(MI, 0, O);
    O << ", ";
    printOperand(MI, 2, O);
    return;
    break;
  case 3:
    // STWPtrPdRr, STWPtrPiRr, LACZRd, LASZRd, LATZRd, STPtrPdRr, STPtrPiRr, ...
    printOperand(MI, 1, O);
    break;
  case 4:
    // BREQk, BRGEk, BRLOk, BRLTk, BRMIk, BRNEk, BRPLk, BRSHk, RCALLk, RJMPk
    printPCRelImm(MI, 0, O);
    return;
    break;
  }


  // Fragment 1 encoded into 3 bits for 5 unique commands.
  switch ((Bits >> 14) & 7) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // ADCWRdRr, ADDWRdRr, ANDIWRdK, ANDWRdRr, CPCWRdRr, CPWRdRr, EORWRdRr, F...
    O << ", ";
    break;
  case 1:
    // ASRB7Rd, ASRW8Rd, ASRWRd, COMWRd, LSLB7Rd, LSLW12Rd, LSLW4Rd, LSLW8Rd,...
    return;
    break;
  case 2:
    // LDWRdPtrPd, LDRdPtrPd
    O << ", -";
    printOperand(MI, 2, O);
    return;
    break;
  case 3:
    // STWPtrPiRr, STPtrPiRr
    O << "+, ";
    printOperand(MI, 2, O);
    return;
    break;
  case 4:
    // SPMZPi
    O << '+';
    return;
    break;
  }


  // Fragment 2 encoded into 3 bits for 5 unique commands.
  switch ((Bits >> 17) & 7) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // ADCWRdRr, ADDWRdRr, ANDIWRdK, ANDWRdRr, EORWRdRr, LDWRdPtrPi, ORIWRdK,...
    printOperand(MI, 2, O);
    break;
  case 1:
    // CPCWRdRr, CPWRdRr, FRMIDX, INWRdA, LDIWRdK, LDSWRdK, LDWRdPtr, LPMWRdZ...
    printOperand(MI, 1, O);
    break;
  case 2:
    // LDDWRdPtrQ, LDDWRdYQ, LDDRdPtrQ
    printMemri(MI, 1, O);
    return;
    break;
  case 3:
    // BRBCsk, BRBSsk
    printPCRelImm(MI, 1, O);
    return;
    break;
  case 4:
    // LACZRd, LASZRd, LATZRd, XCHZRd
    printOperand(MI, 0, O);
    return;
    break;
  }


  // Fragment 3 encoded into 2 bits for 3 unique commands.
  switch ((Bits >> 20) & 3) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // ADCWRdRr, ADDWRdRr, ANDIWRdK, ANDWRdRr, CPCWRdRr, CPWRdRr, EORWRdRr, I...
    return;
    break;
  case 1:
    // FRMIDX
    O << ", ";
    printOperand(MI, 2, O);
    return;
    break;
  case 2:
    // LDWRdPtrPi, LPMWRdZPi, ELPMRdZPi, LDRdPtrPi, LPMRdZPi
    O << '+';
    return;
    break;
  }

}


/// getRegisterName - This method is automatically generated by tblgen
/// from the register set description.  This returns the assembler name
/// for the specified register.
const char *AVRInstPrinter::
getRegisterName(unsigned RegNo, unsigned AltIdx) {
  assert(RegNo && RegNo < 62 && "Invalid register number!");


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Woverlength-strings"
#endif
  static const char AsmStrsNoRegAltName[] = {
  /* 0 */ "r11:r10\0"
  /* 8 */ "r21:r20\0"
  /* 16 */ "r31:r30\0"
  /* 24 */ "r1:r0\0"
  /* 30 */ "r12:r11\0"
  /* 38 */ "r22:r21\0"
  /* 46 */ "r31\0"
  /* 50 */ "r1\0"
  /* 53 */ "r13:r12\0"
  /* 61 */ "r23:r22\0"
  /* 69 */ "r3:r2\0"
  /* 75 */ "r14:r13\0"
  /* 83 */ "r24:r23\0"
  /* 91 */ "r3\0"
  /* 94 */ "r15:r14\0"
  /* 102 */ "r25:r24\0"
  /* 110 */ "r5:r4\0"
  /* 116 */ "r16:r15\0"
  /* 124 */ "r26:r25\0"
  /* 132 */ "r5\0"
  /* 135 */ "r17:r16\0"
  /* 143 */ "r27:r26\0"
  /* 151 */ "r7:r6\0"
  /* 157 */ "r18:r17\0"
  /* 165 */ "r27\0"
  /* 169 */ "r7\0"
  /* 172 */ "r19:r18\0"
  /* 180 */ "r29:r28\0"
  /* 188 */ "r9:r8\0"
  /* 194 */ "r20:r19\0"
  /* 202 */ "r29\0"
  /* 206 */ "r10:r9\0"
  /* 213 */ "SPH\0"
  /* 217 */ "SPL\0"
  /* 221 */ "SP\0"
  /* 224 */ "FLAGS\0"
};
#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif

  static const uint8_t RegAsmOffsetNoRegAltName[] = {
    221, 213, 217, 224, 27, 50, 72, 91, 113, 132, 154, 169, 191, 210, 
    4, 34, 57, 79, 98, 120, 139, 161, 176, 198, 12, 42, 65, 87, 
    106, 128, 147, 165, 184, 202, 20, 46, 24, 69, 110, 151, 188, 206, 
    0, 30, 53, 75, 94, 116, 135, 157, 172, 194, 8, 38, 61, 83, 
    102, 124, 143, 180, 16, 
  };


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Woverlength-strings"
#endif
  static const char AsmStrsptr[] = {
  /* 0 */ "X\0"
  /* 2 */ "Y\0"
  /* 4 */ "Z\0"
};
#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif

  static const uint8_t RegAsmOffsetptr[] = {
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 0, 2, 4, 
  };

  switch(AltIdx) {
  default: llvm_unreachable("Invalid register alt name index!");
  case AVR::NoRegAltName:
    assert(*(AsmStrsNoRegAltName+RegAsmOffsetNoRegAltName[RegNo-1]) &&
           "Invalid alt name index for register!");
    return AsmStrsNoRegAltName+RegAsmOffsetNoRegAltName[RegNo-1];
  case AVR::ptr:
    assert(*(AsmStrsptr+RegAsmOffsetptr[RegNo-1]) &&
           "Invalid alt name index for register!");
    return AsmStrsptr+RegAsmOffsetptr[RegNo-1];
  }
}

#ifdef PRINT_ALIAS_INSTR
#undef PRINT_ALIAS_INSTR

bool AVRInstPrinter::printAliasInstr(const MCInst *MI, uint64_t Address, raw_ostream &OS) {
  static const PatternsForOpcode OpToPatterns[] = {
    {AVR::ADCRdRr, 0, 1 },
    {AVR::ADDRdRr, 1, 1 },
    {AVR::ANDRdRr, 2, 1 },
    {AVR::BCLRs, 3, 8 },
    {AVR::BRBCsk, 11, 5 },
    {AVR::BRBSsk, 16, 5 },
    {AVR::BSETs, 21, 8 },
    {AVR::EORRdRr, 29, 1 },
  };

  static const AliasPattern Patterns[] = {
    // AVR::ADCRdRr - 0
    {0, 0, 3, 3 },
    // AVR::ADDRdRr - 1
    {7, 3, 3, 3 },
    // AVR::ANDRdRr - 2
    {14, 6, 3, 3 },
    // AVR::BCLRs - 3
    {21, 9, 1, 1 },
    {25, 10, 1, 1 },
    {29, 11, 1, 1 },
    {33, 12, 1, 1 },
    {37, 13, 1, 1 },
    {41, 14, 1, 1 },
    {45, 15, 1, 1 },
    {49, 16, 1, 1 },
    // AVR::BRBCsk - 11
    {53, 17, 2, 1 },
    {63, 18, 2, 1 },
    {73, 19, 2, 1 },
    {83, 20, 2, 1 },
    {93, 21, 2, 1 },
    // AVR::BRBSsk - 16
    {103, 22, 2, 1 },
    {113, 23, 2, 1 },
    {123, 24, 2, 1 },
    {133, 25, 2, 1 },
    {143, 26, 2, 1 },
    // AVR::BSETs - 21
    {153, 27, 1, 1 },
    {157, 28, 1, 1 },
    {161, 29, 1, 1 },
    {165, 30, 1, 1 },
    {169, 31, 1, 1 },
    {173, 32, 1, 1 },
    {177, 33, 1, 1 },
    {181, 34, 1, 1 },
    // AVR::EORRdRr - 29
    {185, 35, 3, 3 },
  };

  static const AliasPatternCond Conds[] = {
    // (ADCRdRr GPR8:$rd, GPR8:$rd) - 0
    {AliasPatternCond::K_RegClass, AVR::GPR8RegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_TiedReg, 0},
    // (ADDRdRr GPR8:$rd, GPR8:$rd) - 3
    {AliasPatternCond::K_RegClass, AVR::GPR8RegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_TiedReg, 0},
    // (ANDRdRr GPR8:$rd, GPR8:$rd) - 6
    {AliasPatternCond::K_RegClass, AVR::GPR8RegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_TiedReg, 0},
    // (BCLRs 0) - 9
    {AliasPatternCond::K_Imm, uint32_t(0)},
    // (BCLRs 1) - 10
    {AliasPatternCond::K_Imm, uint32_t(1)},
    // (BCLRs 2) - 11
    {AliasPatternCond::K_Imm, uint32_t(2)},
    // (BCLRs 3) - 12
    {AliasPatternCond::K_Imm, uint32_t(3)},
    // (BCLRs 4) - 13
    {AliasPatternCond::K_Imm, uint32_t(4)},
    // (BCLRs 5) - 14
    {AliasPatternCond::K_Imm, uint32_t(5)},
    // (BCLRs 6) - 15
    {AliasPatternCond::K_Imm, uint32_t(6)},
    // (BCLRs 7) - 16
    {AliasPatternCond::K_Imm, uint32_t(7)},
    // (BRBCsk 0, relbrtarget_7:$k) - 17
    {AliasPatternCond::K_Imm, uint32_t(0)},
    // (BRBCsk 5, relbrtarget_7:$k) - 18
    {AliasPatternCond::K_Imm, uint32_t(5)},
    // (BRBCsk 6, relbrtarget_7:$k) - 19
    {AliasPatternCond::K_Imm, uint32_t(6)},
    // (BRBCsk 3, relbrtarget_7:$k) - 20
    {AliasPatternCond::K_Imm, uint32_t(3)},
    // (BRBCsk 7, relbrtarget_7:$k) - 21
    {AliasPatternCond::K_Imm, uint32_t(7)},
    // (BRBSsk 0, relbrtarget_7:$k) - 22
    {AliasPatternCond::K_Imm, uint32_t(0)},
    // (BRBSsk 5, relbrtarget_7:$k) - 23
    {AliasPatternCond::K_Imm, uint32_t(5)},
    // (BRBSsk 6, relbrtarget_7:$k) - 24
    {AliasPatternCond::K_Imm, uint32_t(6)},
    // (BRBSsk 3, relbrtarget_7:$k) - 25
    {AliasPatternCond::K_Imm, uint32_t(3)},
    // (BRBSsk 7, relbrtarget_7:$k) - 26
    {AliasPatternCond::K_Imm, uint32_t(7)},
    // (BSETs 0) - 27
    {AliasPatternCond::K_Imm, uint32_t(0)},
    // (BSETs 1) - 28
    {AliasPatternCond::K_Imm, uint32_t(1)},
    // (BSETs 2) - 29
    {AliasPatternCond::K_Imm, uint32_t(2)},
    // (BSETs 3) - 30
    {AliasPatternCond::K_Imm, uint32_t(3)},
    // (BSETs 4) - 31
    {AliasPatternCond::K_Imm, uint32_t(4)},
    // (BSETs 5) - 32
    {AliasPatternCond::K_Imm, uint32_t(5)},
    // (BSETs 6) - 33
    {AliasPatternCond::K_Imm, uint32_t(6)},
    // (BSETs 7) - 34
    {AliasPatternCond::K_Imm, uint32_t(7)},
    // (EORRdRr GPR8:$rd, GPR8:$rd) - 35
    {AliasPatternCond::K_RegClass, AVR::GPR8RegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_TiedReg, 0},
  };

  static const char AsmStrings[] =
    /* 0 */ "rol	$\x01\0"
    /* 7 */ "lsl	$\x01\0"
    /* 14 */ "tst	$\x01\0"
    /* 21 */ "clc\0"
    /* 25 */ "clz\0"
    /* 29 */ "cln\0"
    /* 33 */ "clv\0"
    /* 37 */ "cls\0"
    /* 41 */ "clh\0"
    /* 45 */ "clt\0"
    /* 49 */ "cli\0"
    /* 53 */ "brcc	$\xFF\x02\x01\0"
    /* 63 */ "brhc	$\xFF\x02\x01\0"
    /* 73 */ "brtc	$\xFF\x02\x01\0"
    /* 83 */ "brvc	$\xFF\x02\x01\0"
    /* 93 */ "brid	$\xFF\x02\x01\0"
    /* 103 */ "brcs	$\xFF\x02\x01\0"
    /* 113 */ "brhs	$\xFF\x02\x01\0"
    /* 123 */ "brts	$\xFF\x02\x01\0"
    /* 133 */ "brvs	$\xFF\x02\x01\0"
    /* 143 */ "brie	$\xFF\x02\x01\0"
    /* 153 */ "sec\0"
    /* 157 */ "sez\0"
    /* 161 */ "sen\0"
    /* 165 */ "sev\0"
    /* 169 */ "ses\0"
    /* 173 */ "seh\0"
    /* 177 */ "set\0"
    /* 181 */ "sei\0"
    /* 185 */ "clr	$\x01\0"
  ;

#ifndef NDEBUG
  static struct SortCheck {
    SortCheck(ArrayRef<PatternsForOpcode> OpToPatterns) {
      assert(std::is_sorted(
                 OpToPatterns.begin(), OpToPatterns.end(),
                 [](const PatternsForOpcode &L, const PatternsForOpcode &R) {
                   return L.Opcode < R.Opcode;
                 }) &&
             "tablegen failed to sort opcode patterns");
    }
  } sortCheckVar(OpToPatterns);
#endif

  AliasMatchingData M {
    makeArrayRef(OpToPatterns),
    makeArrayRef(Patterns),
    makeArrayRef(Conds),
    StringRef(AsmStrings, array_lengthof(AsmStrings)),
    nullptr,
  };
  const char *AsmString = matchAliasPatterns(MI, nullptr, M);
  if (!AsmString) return false;

  unsigned I = 0;
  while (AsmString[I] != ' ' && AsmString[I] != '\t' &&
         AsmString[I] != '$' && AsmString[I] != '\0')
    ++I;
  OS << '\t' << StringRef(AsmString, I);
  if (AsmString[I] != '\0') {
    if (AsmString[I] == ' ' || AsmString[I] == '\t') {
      OS << '\t';
      ++I;
    }
    do {
      if (AsmString[I] == '$') {
        ++I;
        if (AsmString[I] == (char)0xff) {
          ++I;
          int OpIdx = AsmString[I++] - 1;
          int PrintMethodIdx = AsmString[I++] - 1;
          printCustomAliasOperand(MI, Address, OpIdx, PrintMethodIdx, OS);
        } else
          printOperand(MI, unsigned(AsmString[I++]) - 1, OS);
      } else {
        OS << AsmString[I++];
      }
    } while (AsmString[I] != '\0');
  }

  return true;
}

void AVRInstPrinter::printCustomAliasOperand(
         const MCInst *MI, uint64_t Address, unsigned OpIdx,
         unsigned PrintMethodIdx,
         raw_ostream &OS) {
  switch (PrintMethodIdx) {
  default:
    llvm_unreachable("Unknown PrintMethod kind");
    break;
  case 0:
    printPCRelImm(MI, OpIdx, OS);
    break;
  }
}

#endif // PRINT_ALIAS_INSTR
